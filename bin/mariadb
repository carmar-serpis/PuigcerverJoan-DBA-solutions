#!/bin/bash
set -f # Disable glob expansion
# set -x

VERBOSE=0
# if tty -s ; then
#     VERBOSE=1
# else
#     VERBOSE=0
# fi

ARGS=''
CONTAINER="mariadb"

while [ $# -ge 1 ] ; do

    case $1 in
        --container)
            CONTAINER=$2
            shift
            ;;
        -v | --verbose)
            VERBOSE=1
            ;;
        *)
            if [[ $1 =~ " " ]]; then
                ARGS="$ARGS '$1'"
            else
                ARGS="$ARGS $1"
            fi
            ;;
    esac
    shift
done

_print(){
    if [ $VERBOSE -gt 0 ]; then
        echo $@
    fi
}

if [ ! -x "$(command -v docker)" ]; then
    echo "Error. docker is not installed"
    exit 1
fi

if [ "$(docker ps -q -f status=exited -f name=$CONTAINER)" ]; then
    _print Starting previous $CONTAINER instance...
    docker start $CONTAINER >/dev/null
elif [ ! "$(docker ps -q -f name=$CONTAINER)" ]; then
    _print Starting $CONTAINER ...
    docker run -d --name $CONTAINER \
        -e MYSQL_ROOT_PASSWORD=1234 \
        -p 3306:3306 \
        --health-cmd='mysql -uroot -p1234' --health-interval=2s \
        mariadb:latest >/dev/null

else
    _print $CONTAINER already running!
fi

# Check health
# f" --health-cmd=\'mysql -u{self.user} -p{self.password}\' --health-interval=2s"
_print -n "Checking $CONTAINER health... "
HEALTH_COMMAND="docker inspect -f {{.State.Health.Status}} $CONTAINER"
HEALTH=`$HEALTH_COMMAND`
until [ $HEALTH = "healthy" ] ; do
    sleep 2
    HEALTH=`$HEALTH_COMMAND`
    _print -n ${HEALTH::1}
done
_print " OK"

IP_COMMAND="docker inspect --format {{.NetworkSettings.IPAddress}} $CONTAINER"
IP=`$IP_COMMAND`
if [ -n "$IP" ] ; then
    _print "$CONTAINER is ready in the IP address: $IP"
fi

COMMAND="mysql -uroot -p1234 --default-character-set=utf8mb4 $ARGS"
if tty -s ; then
    DOCKER_COMMAND="docker exec -it $CONTAINER $COMMAND"
    eval $DOCKER_COMMAND

    RETURN_VALUE=$?
    if [ $RETURN_VALUE -ne 0 ]; then
        _print
        _print "Error executing the following command: (return value: $RETURN_VALUE)"
        _print $DOCKER_COMMAND
        _print $COMMAND
    fi
else
    DOCKER_COMMAND="docker exec -i $CONTAINER $COMMAND"
    eval $DOCKER_COMMAND <&0
    # $DOCKER_COMMAND <&0
fi
